// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: svsignal.proto

// python -m grpc_tools.protoc -I. -I$GOPATH/src --python_out=. --grpc_python_out=. *.proto
// protoc -I. -I$GOPATH/src --go_out=$GOPATH/src --go-grpc_out=require_unimplemented_servers=false:$GOPATH/src --grpc-gateway_out=logtostderr=true:$GOPATH/src  *.proto

package svsignal

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypeSignal int32

const (
	TypeSignal_TYPE_IVALUE TypeSignal = 0
	TypeSignal_TYPE_FVALUE TypeSignal = 1
	TypeSignal_TYPE_MVALUE TypeSignal = 2
)

// Enum value maps for TypeSignal.
var (
	TypeSignal_name = map[int32]string{
		0: "TYPE_IVALUE",
		1: "TYPE_FVALUE",
		2: "TYPE_MVALUE",
	}
	TypeSignal_value = map[string]int32{
		"TYPE_IVALUE": 0,
		"TYPE_FVALUE": 1,
		"TYPE_MVALUE": 2,
	}
)

func (x TypeSignal) Enum() *TypeSignal {
	p := new(TypeSignal)
	*p = x
	return p
}

func (x TypeSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_svsignal_proto_enumTypes[0].Descriptor()
}

func (TypeSignal) Type() protoreflect.EnumType {
	return &file_svsignal_proto_enumTypes[0]
}

func (x TypeSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeSignal.Descriptor instead.
func (TypeSignal) EnumDescriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{0}
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Empty bool `protobuf:"varint,1,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{0}
}

func (x *Nothing) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{1}
}

func (x *Group) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Groups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups map[string]*Group `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Groups) Reset() {
	*x = Groups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Groups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Groups) ProtoMessage() {}

func (x *Groups) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Groups.ProtoReflect.Descriptor instead.
func (*Groups) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{2}
}

func (x *Groups) GetGroups() map[string]*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type MsgKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *MsgKey) Reset() {
	*x = MsgKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgKey) ProtoMessage() {}

func (x *MsgKey) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgKey.ProtoReflect.Descriptor instead.
func (*MsgKey) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{3}
}

func (x *MsgKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag   string `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{4}
}

func (x *Tag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	GroupKey string     `protobuf:"bytes,2,opt,name=GroupKey,proto3" json:"GroupKey,omitempty"`
	Name     string     `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	TypeSave TypeSignal `protobuf:"varint,4,opt,name=TypeSave,proto3,enum=svsignal.TypeSignal" json:"TypeSave,omitempty"`
	Period   int32      `protobuf:"varint,5,opt,name=Period,proto3" json:"Period,omitempty"`
	Delta    float32    `protobuf:"fixed32,6,opt,name=Delta,proto3" json:"Delta,omitempty"`
	Tags     []*Tag     `protobuf:"bytes,7,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{5}
}

func (x *Signal) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Signal) GetGroupKey() string {
	if x != nil {
		return x.GroupKey
	}
	return ""
}

func (x *Signal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Signal) GetTypeSave() TypeSignal {
	if x != nil {
		return x.TypeSave
	}
	return TypeSignal_TYPE_IVALUE
}

func (x *Signal) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Signal) GetDelta() float32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *Signal) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Signals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signals map[string]*Signal `protobuf:"bytes,1,rep,name=Signals,proto3" json:"Signals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Signals) Reset() {
	*x = Signals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signals) ProtoMessage() {}

func (x *Signals) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signals.ProtoReflect.Descriptor instead.
func (*Signals) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{6}
}

func (x *Signals) GetSignals() map[string]*Signal {
	if x != nil {
		return x.Signals
	}
	return nil
}

type RequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalKey string `protobuf:"bytes,1,opt,name=SignalKey,proto3" json:"SignalKey,omitempty"`
	Begin     int64  `protobuf:"varint,2,opt,name=Begin,proto3" json:"Begin,omitempty"`
	End       int64  `protobuf:"varint,3,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *RequestData) Reset() {
	*x = RequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestData) ProtoMessage() {}

func (x *RequestData) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestData.ProtoReflect.Descriptor instead.
func (*RequestData) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{7}
}

func (x *RequestData) GetSignalKey() string {
	if x != nil {
		return x.SignalKey
	}
	return ""
}

func (x *RequestData) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *RequestData) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type MValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UTime int64   `protobuf:"varint,1,opt,name=UTime,proto3" json:"UTime,omitempty"`
	Min   float64 `protobuf:"fixed64,2,opt,name=Min,proto3" json:"Min,omitempty"`
	Max   float64 `protobuf:"fixed64,3,opt,name=Max,proto3" json:"Max,omitempty"`
	Avg   float64 `protobuf:"fixed64,4,opt,name=Avg,proto3" json:"Avg,omitempty"`
	NULL  bool    `protobuf:"varint,5,opt,name=NULL,proto3" json:"NULL,omitempty"`
}

func (x *MValue) Reset() {
	*x = MValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MValue) ProtoMessage() {}

func (x *MValue) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MValue.ProtoReflect.Descriptor instead.
func (*MValue) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{8}
}

func (x *MValue) GetUTime() int64 {
	if x != nil {
		return x.UTime
	}
	return 0
}

func (x *MValue) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MValue) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MValue) GetAvg() float64 {
	if x != nil {
		return x.Avg
	}
	return 0
}

func (x *MValue) GetNULL() bool {
	if x != nil {
		return x.NULL
	}
	return false
}

type IValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UTime int64 `protobuf:"varint,1,opt,name=UTime,proto3" json:"UTime,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	NULL  bool  `protobuf:"varint,3,opt,name=NULL,proto3" json:"NULL,omitempty"`
}

func (x *IValue) Reset() {
	*x = IValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IValue) ProtoMessage() {}

func (x *IValue) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IValue.ProtoReflect.Descriptor instead.
func (*IValue) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{9}
}

func (x *IValue) GetUTime() int64 {
	if x != nil {
		return x.UTime
	}
	return 0
}

func (x *IValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IValue) GetNULL() bool {
	if x != nil {
		return x.NULL
	}
	return false
}

type FValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UTime int64   `protobuf:"varint,1,opt,name=UTime,proto3" json:"UTime,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=Value,proto3" json:"Value,omitempty"`
	NULL  bool    `protobuf:"varint,3,opt,name=NULL,proto3" json:"NULL,omitempty"`
}

func (x *FValue) Reset() {
	*x = FValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FValue) ProtoMessage() {}

func (x *FValue) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FValue.ProtoReflect.Descriptor instead.
func (*FValue) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{10}
}

func (x *FValue) GetUTime() int64 {
	if x != nil {
		return x.UTime
	}
	return 0
}

func (x *FValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FValue) GetNULL() bool {
	if x != nil {
		return x.NULL
	}
	return false
}

//В зависимости от типа данных, возвращается один из array IValue,FValue,MFValue
type ResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeSignal TypeSignal `protobuf:"varint,1,opt,name=TypeSignal,proto3,enum=svsignal.TypeSignal" json:"TypeSignal,omitempty"`
	IValues    []*IValue  `protobuf:"bytes,2,rep,name=IValues,proto3" json:"IValues,omitempty"`
	FValues    []*FValue  `protobuf:"bytes,3,rep,name=FValues,proto3" json:"FValues,omitempty"`
	MValues    []*MValue  `protobuf:"bytes,4,rep,name=MValues,proto3" json:"MValues,omitempty"`
}

func (x *ResponseData) Reset() {
	*x = ResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseData) ProtoMessage() {}

func (x *ResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseData.ProtoReflect.Descriptor instead.
func (*ResponseData) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseData) GetTypeSignal() TypeSignal {
	if x != nil {
		return x.TypeSignal
	}
	return TypeSignal_TYPE_IVALUE
}

func (x *ResponseData) GetIValues() []*IValue {
	if x != nil {
		return x.IValues
	}
	return nil
}

func (x *ResponseData) GetFValues() []*FValue {
	if x != nil {
		return x.FValues
	}
	return nil
}

func (x *ResponseData) GetMValues() []*MValue {
	if x != nil {
		return x.MValues
	}
	return nil
}

type MsgSaveValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalKey string  `protobuf:"bytes,1,opt,name=SignalKey,proto3" json:"SignalKey,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *MsgSaveValue) Reset() {
	*x = MsgSaveValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSaveValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSaveValue) ProtoMessage() {}

func (x *MsgSaveValue) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSaveValue.ProtoReflect.Descriptor instead.
func (*MsgSaveValue) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{12}
}

func (x *MsgSaveValue) GetSignalKey() string {
	if x != nil {
		return x.SignalKey
	}
	return ""
}

func (x *MsgSaveValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SignalTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalKey string `protobuf:"bytes,1,opt,name=SignalKey,proto3" json:"SignalKey,omitempty"`
	Tag       *Tag   `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *SignalTag) Reset() {
	*x = SignalTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svsignal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalTag) ProtoMessage() {}

func (x *SignalTag) ProtoReflect() protoreflect.Message {
	mi := &file_svsignal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalTag.ProtoReflect.Descriptor instead.
func (*SignalTag) Descriptor() ([]byte, []int) {
	return file_svsignal_proto_rawDescGZIP(), []int{13}
}

func (x *SignalTag) GetSignalKey() string {
	if x != nil {
		return x.SignalKey
	}
	return ""
}

func (x *SignalTag) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

var File_svsignal_proto protoreflect.FileDescriptor

var file_svsignal_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x76, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1a, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x22, 0x2d, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xcd, 0x01, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x76,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x22, 0x91, 0x01, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x07,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x1a, 0x4c, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x68, 0x0a, 0x06, 0x4d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a,
	0x03, 0x41, 0x76, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x41, 0x76, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4e,
	0x55, 0x4c, 0x4c, 0x22, 0x48, 0x0a, 0x06, 0x49, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x55, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x55, 0x4c,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x48, 0x0a,
	0x06, 0x46, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73,
	0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x07, 0x49, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x49, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x46, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x76,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x46,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x4d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x42, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x53, 0x61, 0x76, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x54,
	0x61, 0x67, 0x2a, 0x3f, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x02, 0x32, 0x9c, 0x08, 0x0a, 0x08, 0x53, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x0f, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x73, 0x76, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x11,
	0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x1a, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x73, 0x76,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x61, 0x6c, 0x6c, 0x12, 0x57, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x0f, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x4b, 0x65, 0x79, 0x7d,
	0x12, 0x35, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x10,
	0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x12, 0x28, 0x2f, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x4b, 0x65, 0x79, 0x7d, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x10, 0x2e, 0x73, 0x76, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x7b, 0x4b, 0x65, 0x79, 0x7d, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x12, 0x13, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x13, 0x2e, 0x73, 0x76, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x1a,
	0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x13, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x1a, 0x11, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e,
	0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f,
	0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x7d, 0x2f, 0x7b, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x7d, 0x2f, 0x7b, 0x45, 0x6e, 0x64, 0x7d, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x73, 0x67, 0x53, 0x61, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x11, 0x2e,
	0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x61, 0x73, 0x61, 0x6c, 0x65, 0x6b, 0x73, 0x2f, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2f, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x73, 0x76, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_svsignal_proto_rawDescOnce sync.Once
	file_svsignal_proto_rawDescData = file_svsignal_proto_rawDesc
)

func file_svsignal_proto_rawDescGZIP() []byte {
	file_svsignal_proto_rawDescOnce.Do(func() {
		file_svsignal_proto_rawDescData = protoimpl.X.CompressGZIP(file_svsignal_proto_rawDescData)
	})
	return file_svsignal_proto_rawDescData
}

var file_svsignal_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_svsignal_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_svsignal_proto_goTypes = []interface{}{
	(TypeSignal)(0),      // 0: svsignal.TypeSignal
	(*Nothing)(nil),      // 1: svsignal.Nothing
	(*Group)(nil),        // 2: svsignal.Group
	(*Groups)(nil),       // 3: svsignal.Groups
	(*MsgKey)(nil),       // 4: svsignal.MsgKey
	(*Tag)(nil),          // 5: svsignal.Tag
	(*Signal)(nil),       // 6: svsignal.Signal
	(*Signals)(nil),      // 7: svsignal.Signals
	(*RequestData)(nil),  // 8: svsignal.RequestData
	(*MValue)(nil),       // 9: svsignal.MValue
	(*IValue)(nil),       // 10: svsignal.IValue
	(*FValue)(nil),       // 11: svsignal.FValue
	(*ResponseData)(nil), // 12: svsignal.ResponseData
	(*MsgSaveValue)(nil), // 13: svsignal.MsgSaveValue
	(*SignalTag)(nil),    // 14: svsignal.SignalTag
	nil,                  // 15: svsignal.Groups.GroupsEntry
	nil,                  // 16: svsignal.Signals.SignalsEntry
}
var file_svsignal_proto_depIdxs = []int32{
	15, // 0: svsignal.Groups.Groups:type_name -> svsignal.Groups.GroupsEntry
	0,  // 1: svsignal.Signal.TypeSave:type_name -> svsignal.TypeSignal
	5,  // 2: svsignal.Signal.Tags:type_name -> svsignal.Tag
	16, // 3: svsignal.Signals.Signals:type_name -> svsignal.Signals.SignalsEntry
	0,  // 4: svsignal.ResponseData.TypeSignal:type_name -> svsignal.TypeSignal
	10, // 5: svsignal.ResponseData.IValues:type_name -> svsignal.IValue
	11, // 6: svsignal.ResponseData.FValues:type_name -> svsignal.FValue
	9,  // 7: svsignal.ResponseData.MValues:type_name -> svsignal.MValue
	5,  // 8: svsignal.SignalTag.Tag:type_name -> svsignal.Tag
	2,  // 9: svsignal.Groups.GroupsEntry.value:type_name -> svsignal.Group
	6,  // 10: svsignal.Signals.SignalsEntry.value:type_name -> svsignal.Signal
	2,  // 11: svsignal.SVSignal.CreateGroup:input_type -> svsignal.Group
	2,  // 12: svsignal.SVSignal.UpdateGroup:input_type -> svsignal.Group
	2,  // 13: svsignal.SVSignal.DeleteGroup:input_type -> svsignal.Group
	1,  // 14: svsignal.SVSignal.GetAllGroup:input_type -> svsignal.Nothing
	4,  // 15: svsignal.SVSignal.GetGroup:input_type -> svsignal.MsgKey
	6,  // 16: svsignal.SVSignal.CreateSignal:input_type -> svsignal.Signal
	6,  // 17: svsignal.SVSignal.UpdateSignal:input_type -> svsignal.Signal
	6,  // 18: svsignal.SVSignal.DeleteSignal:input_type -> svsignal.Signal
	4,  // 19: svsignal.SVSignal.GetSignals:input_type -> svsignal.MsgKey
	4,  // 20: svsignal.SVSignal.GetSignal:input_type -> svsignal.MsgKey
	14, // 21: svsignal.SVSignal.CreateTag:input_type -> svsignal.SignalTag
	14, // 22: svsignal.SVSignal.UpdateTag:input_type -> svsignal.SignalTag
	14, // 23: svsignal.SVSignal.DeleteTag:input_type -> svsignal.SignalTag
	8,  // 24: svsignal.SVSignal.GetData:input_type -> svsignal.RequestData
	13, // 25: svsignal.SVSignal.SaveValue:input_type -> svsignal.MsgSaveValue
	1,  // 26: svsignal.SVSignal.CreateGroup:output_type -> svsignal.Nothing
	1,  // 27: svsignal.SVSignal.UpdateGroup:output_type -> svsignal.Nothing
	1,  // 28: svsignal.SVSignal.DeleteGroup:output_type -> svsignal.Nothing
	3,  // 29: svsignal.SVSignal.GetAllGroup:output_type -> svsignal.Groups
	2,  // 30: svsignal.SVSignal.GetGroup:output_type -> svsignal.Group
	1,  // 31: svsignal.SVSignal.CreateSignal:output_type -> svsignal.Nothing
	1,  // 32: svsignal.SVSignal.UpdateSignal:output_type -> svsignal.Nothing
	1,  // 33: svsignal.SVSignal.DeleteSignal:output_type -> svsignal.Nothing
	7,  // 34: svsignal.SVSignal.GetSignals:output_type -> svsignal.Signals
	6,  // 35: svsignal.SVSignal.GetSignal:output_type -> svsignal.Signal
	1,  // 36: svsignal.SVSignal.CreateTag:output_type -> svsignal.Nothing
	1,  // 37: svsignal.SVSignal.UpdateTag:output_type -> svsignal.Nothing
	1,  // 38: svsignal.SVSignal.DeleteTag:output_type -> svsignal.Nothing
	12, // 39: svsignal.SVSignal.GetData:output_type -> svsignal.ResponseData
	1,  // 40: svsignal.SVSignal.SaveValue:output_type -> svsignal.Nothing
	26, // [26:41] is the sub-list for method output_type
	11, // [11:26] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_svsignal_proto_init() }
func file_svsignal_proto_init() {
	if File_svsignal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svsignal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Groups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSaveValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svsignal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svsignal_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svsignal_proto_goTypes,
		DependencyIndexes: file_svsignal_proto_depIdxs,
		EnumInfos:         file_svsignal_proto_enumTypes,
		MessageInfos:      file_svsignal_proto_msgTypes,
	}.Build()
	File_svsignal_proto = out.File
	file_svsignal_proto_rawDesc = nil
	file_svsignal_proto_goTypes = nil
	file_svsignal_proto_depIdxs = nil
}
