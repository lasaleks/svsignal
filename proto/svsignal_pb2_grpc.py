# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import svsignal_pb2 as svsignal__pb2


class SVSignalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGroup = channel.unary_unary(
                '/svsignal.SVSignal/CreateGroup',
                request_serializer=svsignal__pb2.Group.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.UpdateGroup = channel.unary_unary(
                '/svsignal.SVSignal/UpdateGroup',
                request_serializer=svsignal__pb2.Group.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/svsignal.SVSignal/DeleteGroup',
                request_serializer=svsignal__pb2.Group.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.GetAllGroup = channel.unary_unary(
                '/svsignal.SVSignal/GetAllGroup',
                request_serializer=svsignal__pb2.Nothing.SerializeToString,
                response_deserializer=svsignal__pb2.Groups.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/svsignal.SVSignal/GetGroup',
                request_serializer=svsignal__pb2.MsgKey.SerializeToString,
                response_deserializer=svsignal__pb2.Group.FromString,
                )
        self.CreateSignal = channel.unary_unary(
                '/svsignal.SVSignal/CreateSignal',
                request_serializer=svsignal__pb2.Signal.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.UpdateSignal = channel.unary_unary(
                '/svsignal.SVSignal/UpdateSignal',
                request_serializer=svsignal__pb2.Signal.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.DeleteSignal = channel.unary_unary(
                '/svsignal.SVSignal/DeleteSignal',
                request_serializer=svsignal__pb2.Signal.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.GetSignals = channel.unary_unary(
                '/svsignal.SVSignal/GetSignals',
                request_serializer=svsignal__pb2.MsgKey.SerializeToString,
                response_deserializer=svsignal__pb2.Signals.FromString,
                )
        self.GetSignal = channel.unary_unary(
                '/svsignal.SVSignal/GetSignal',
                request_serializer=svsignal__pb2.MsgKey.SerializeToString,
                response_deserializer=svsignal__pb2.Signal.FromString,
                )
        self.CreateTag = channel.unary_unary(
                '/svsignal.SVSignal/CreateTag',
                request_serializer=svsignal__pb2.SignalTag.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.UpdateTag = channel.unary_unary(
                '/svsignal.SVSignal/UpdateTag',
                request_serializer=svsignal__pb2.SignalTag.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.DeleteTag = channel.unary_unary(
                '/svsignal.SVSignal/DeleteTag',
                request_serializer=svsignal__pb2.SignalTag.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )
        self.GetData = channel.unary_unary(
                '/svsignal.SVSignal/GetData',
                request_serializer=svsignal__pb2.RequestData.SerializeToString,
                response_deserializer=svsignal__pb2.ResponseData.FromString,
                )
        self.SaveValue = channel.unary_unary(
                '/svsignal.SVSignal/SaveValue',
                request_serializer=svsignal__pb2.MsgSaveValue.SerializeToString,
                response_deserializer=svsignal__pb2.Nothing.FromString,
                )


class SVSignalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SVSignalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=svsignal__pb2.Group.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'UpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroup,
                    request_deserializer=svsignal__pb2.Group.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=svsignal__pb2.Group.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'GetAllGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllGroup,
                    request_deserializer=svsignal__pb2.Nothing.FromString,
                    response_serializer=svsignal__pb2.Groups.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=svsignal__pb2.MsgKey.FromString,
                    response_serializer=svsignal__pb2.Group.SerializeToString,
            ),
            'CreateSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSignal,
                    request_deserializer=svsignal__pb2.Signal.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'UpdateSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSignal,
                    request_deserializer=svsignal__pb2.Signal.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'DeleteSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSignal,
                    request_deserializer=svsignal__pb2.Signal.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'GetSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignals,
                    request_deserializer=svsignal__pb2.MsgKey.FromString,
                    response_serializer=svsignal__pb2.Signals.SerializeToString,
            ),
            'GetSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignal,
                    request_deserializer=svsignal__pb2.MsgKey.FromString,
                    response_serializer=svsignal__pb2.Signal.SerializeToString,
            ),
            'CreateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTag,
                    request_deserializer=svsignal__pb2.SignalTag.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'UpdateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTag,
                    request_deserializer=svsignal__pb2.SignalTag.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'DeleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTag,
                    request_deserializer=svsignal__pb2.SignalTag.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=svsignal__pb2.RequestData.FromString,
                    response_serializer=svsignal__pb2.ResponseData.SerializeToString,
            ),
            'SaveValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveValue,
                    request_deserializer=svsignal__pb2.MsgSaveValue.FromString,
                    response_serializer=svsignal__pb2.Nothing.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'svsignal.SVSignal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SVSignal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/CreateGroup',
            svsignal__pb2.Group.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/UpdateGroup',
            svsignal__pb2.Group.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/DeleteGroup',
            svsignal__pb2.Group.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/GetAllGroup',
            svsignal__pb2.Nothing.SerializeToString,
            svsignal__pb2.Groups.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/GetGroup',
            svsignal__pb2.MsgKey.SerializeToString,
            svsignal__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/CreateSignal',
            svsignal__pb2.Signal.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/UpdateSignal',
            svsignal__pb2.Signal.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/DeleteSignal',
            svsignal__pb2.Signal.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/GetSignals',
            svsignal__pb2.MsgKey.SerializeToString,
            svsignal__pb2.Signals.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/GetSignal',
            svsignal__pb2.MsgKey.SerializeToString,
            svsignal__pb2.Signal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/CreateTag',
            svsignal__pb2.SignalTag.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/UpdateTag',
            svsignal__pb2.SignalTag.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/DeleteTag',
            svsignal__pb2.SignalTag.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/GetData',
            svsignal__pb2.RequestData.SerializeToString,
            svsignal__pb2.ResponseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/svsignal.SVSignal/SaveValue',
            svsignal__pb2.MsgSaveValue.SerializeToString,
            svsignal__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
